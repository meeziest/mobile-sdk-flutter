class UserAgentHelper {  /// Method to parse Android version from a given string.  ///  /// The function uses a regular expression to find the first occurrence  /// of a number in the given input string.  ///  /// Returns the Android version as a string if found, otherwise returns an empty string.  ///  /// [input] The string containing the Android version.  static String parseAndroidVersion(String input) {    // Define the regular expression to match a number    final RegExp versionRegex = RegExp(r'\b\d+\b');    // Search for the pattern in the given input string    final match = versionRegex.firstMatch(input);    // If a match is found, return it    if (match != null) {      return match.group(0)!;    } else {      // If no match is found, return an empty string      return '';    }  }  /// Method to parse iOS version from a given string.  ///  /// The function uses a regular expression to find the first occurrence  /// of a pattern that looks like a version number (e.g., 14.5) in the given input string.  ///  /// Returns the iOS version as a string if found, otherwise returns an empty string.  ///  /// [input] The string containing the iOS version.  static String parseIOSVersion(String input) {    // Define the regular expression to match a version number pattern (e.g., 14.5)    final RegExp versionRegex = RegExp(r'\b\d+\.\d+\b');    // Search for the pattern in the given input string    final match = versionRegex.firstMatch(input);    // If a match is found, return it    if (match != null) {      return match.group(0)!;    } else {      // If no match is found, return an empty string      return '';    }  }  /// Method to parse the architecture from the given Darwin Kernel version string.  ///  /// The function uses a regular expression to find the pattern `RELEASE_`  /// followed by any word characters and extracts this information.  ///  /// Returns the architecture as a string if found, otherwise returns 'Unknown'.  ///  /// [kernelVersion] The Darwin Kernel version string.  static String parseArchitecture(String kernelVersion) {    // Define the regular expression to match the pattern RELEASE_<architecture>    RegExp regExp = RegExp(r'RELEASE_(\w+)', caseSensitive: false);    // Search for the pattern in the given kernel version string    Match? match = regExp.firstMatch(kernelVersion);    // If a match is found and it contains the architecture group, return it    if (match != null && match.groupCount > 0) {      return match.group(1) ?? 'Unknown';    } else {      // If no match is found, return 'Unknown'      return 'Unknown';    }  }}