import 'dart:async';import 'package:injectable/injectable.dart';import 'package:webitel_portal_sdk/src/domain/entities/download.dart';import 'package:webitel_portal_sdk/src/domain/entities/media_file_response.dart';import 'package:webitel_portal_sdk/src/domain/services/chat_service.dart';import 'package:webitel_portal_sdk/src/generated/portal/media.pbgrpc.dart';import 'package:webitel_portal_sdk/src/injection/injection.dart';/// Implementation of the [Download] interface, representing a file download operation.@LazySingleton(as: Download)final class DownloadImpl implements Download {  /// The ID of the file being downloaded.  final String fileId;  /// The current offset in bytes of the download.  int offset;  /// The subscription for the download stream.  StreamSubscription<MediaFile>? subscription;  @override  final StreamController<MediaFileResponse> onData;  late final ChatService _chatService;  /// Constructs a [DownloadImpl] with the given file ID, offset, and data stream.  ///  /// [fileId] is the ID of the file being downloaded.  /// [offset] is the current offset in bytes of the download.  /// [onData] is a stream of [MediaFileResponse] providing updates on the download progress.  DownloadImpl({    this.subscription,    required this.offset,    required this.onData,    required this.fileId,  }) {    _chatService = getIt.get<ChatService>();  }  /// Pauses the download operation.  ///  /// Cancels the current subscription and delegates the pause operation to the [ChatService].  @override  Future<void> pause() async {    await subscription?.cancel();  }  /// Resumes the download operation.  ///  /// Delegates the resume operation to the [ChatService].  @override  Future<void> resume() async {    _chatService.resumeDownload(      fileId: fileId,      controller: onData,      offset: offset,      download: this,    );  }  /// Updates the offset of the download.  ///  /// [newOffset] is the new offset in bytes to update.  void updateOffset(int newOffset) {    offset = newOffset;  }  /// Sets the subscription for the download.  ///  /// [newSubscription] is the new [StreamSubscription] to set.  void setSubscription(StreamSubscription<MediaFile> newSubscription) {    subscription = newSubscription;  }}